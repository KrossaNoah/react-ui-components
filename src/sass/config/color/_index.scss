@use 'sass:map';
@use 'default' as *;
@use 'primary' as *;
@use 'danger' as *;

/// @color
/// Colors are organized into contexts, with the keyword @color-context
/// serving as their identifier.
///
/// * Each @color-context has a base state (with the exception of default),
/// a dark state, and finally a light state. The latter two will be
/// identified using the keyword @theme.
///
/// * Each state has the following properties:
/// 
///   - container - color for the base container background.
/// 
///   - on-container - color for text displayed on container.
/// 
///   - surface - background color for UI elements.
/// 
///   - on-surface - text color displayed on surface.
/// 
///   - alt-surface - alternative background color for UI elements (very useful
///     for dynamically changing the background based on certain user actions).
/// 
///   - on-alt-surface - text color displayed on alt-surface.
/// 
///   - accent - highlight color used for emphasizing elements.


/// Base configuration for colors, this colors apply directly to root
/// so, is not theme sensitive.
$color-context-prefix: '--color';
$color-context-palette-map: (
  primary: $color-primary-map,
  danger: $color-danger-map
);

$color-context-properties: (
  container,
  on-container,
  surface,
  on-surface,
  alt-surface,
  on-alt-surface,
  accent
);

/// List of aviable color contexts
/// This list help us to generate classes.
$avialble-color-contexts: map.keys($color-context-palette-map);

/// Should merge all `@color-context` theme settings.
$theme-prefix: '--theme';
$dark-theme-palette: map.merge(
  $color-default-dark-map,
  (
    primary: $color-primary-dark-map,
    danger: $color-danger-dark-map,
  )
);

$light-theme-palette: map.merge(
  $color-default-light-map,
  (
    primary: $color-primary-light-map,
    danger: $color-danger-light-map
  )
);